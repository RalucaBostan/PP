import java.util.Collections.*
import java.util.Locale.filter

//fun <A,B,C>((A)->B).map(transformare: (B) -> C) : (A) -> C = {t->transformare(this(t))}

typealias ListInt = (List<Int>) -> List<Int>

infix fun ListInt.map(g : ListInt) : ListInt{
    return {x -> this(g(x))}
}

fun Sort(a : List<Int>, fun1 : ListInt,fun2 : ListInt) = { a : List<Int> -> fun1(a)} map {a : List<Int> -> fun2(a)}

fun operatie_pe_lista(a : List<Int>,operatie : ListInt) : List<Int>{
    return operatie(a)
}

object ListFunctions{
    fun sort(list: List<Int>): List<Int>{
        sort(list)
        return list
    }
    fun filter(list : List<Int>) : List<Int>{
        list.filter{it % 2 == 0}
        return list
    }
}


fun main(){
    var a = (1..100).toList()
    var b = println(Sort(a,{operatie_pe_lista(a,{a : List<Int> -> ListFunctions.filter(a)})},{operatie_pe_lista(a,{a : List<Int> -> ListFunctions.sort(a)})}))
}