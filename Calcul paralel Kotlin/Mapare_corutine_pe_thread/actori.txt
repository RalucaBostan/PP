import kotlinx.coroutines.*
import kotlinx.coroutines.channels.actor
import kotlin.system.measureTimeMillis


suspend fun CoroutineScope.massiveRuns(action: suspend () -> Unit) {
    val n = 100  // number of coroutines to launch
    val k = 1000 // times an action is repeated by each coroutine
    val time = measureTimeMillis {
        val jobs = List(n) {
            launch {
                repeat(k) { action() }
            }
        }
        jobs.forEach { it.join() }
    }
    println("Completed ${n * k} actions in $time ms")
}


sealed class CounterMsg

object IncCounter : CounterMsg()

class GetCounter(val response : CompletableDeferred<Int>) : CounterMsg()

fun CoroutineScope.counterActor() = actor<CounterMsg>{
    var counter = 0
    for(msg in channel){
        when(msg){
            is IncCounter -> counter++
            is GetCounter -> msg.response.complete(counter)
        }
    }
}

fun main(args : Array<String>){
    runBlocking {
        val counter = counterActor()
        GlobalScope.massiveRuns{counter.send(IncCounter)}
        val response = CompletableDeferred<Int>()
        GlobalScope.massiveRuns{counter.send(GetCounter(response))}
        println("Counter = ${response.await()}")
        counter.close()
    }
}
